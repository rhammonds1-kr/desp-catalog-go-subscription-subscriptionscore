// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DateTime.avsc
 *     Enrollment.avsc
 *     EnrollmentCancelledEvent.avsc
 *     EnrollmentCreatedEvent.avsc
 *     EnrollmentExpirationEvent.avsc
 *     EnrollmentExpiredEvent.avsc
 *     EnrollmentRenewalEvent.avsc
 *     EventHeader.avsc
 *     SubscriptionType.avsc
 *     SubscriptionTypeCreatedEvent.avsc
 *     SubscriptionTypeUpdatedEvent.avsc
 */
package subscription_subscriptionscore

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type Enrollment struct {
	// Unique identifier of the enrollment
	Id string `json:"id"`
	// Customer's Loyalty ID
	LoyaltyId string `json:"loyaltyId"`
	// Date on when customer has purchased the subscription
	EnrollmentDate DateTime `json:"enrollmentDate"`
	// Last date for the customer to get benefits
	ExpirationDate string `json:"expirationDate"`
	// Date on when customer has renewed their already purchased subscription
	RenewalDate DateTime `json:"renewalDate"`
	// Date on when the subscription is due for renewal
	RenewalDueDate string `json:"renewalDueDate"`
	// UPC of the item (duration) that customer has purchased
	Gtin13 string `json:"gtin13"`
	// Status of the subscription
	Status string `json:"status"`
	// Indicates whether auto renewal is enabled for this customer
	AutoRenewal bool `json:"autoRenewal"`
	// Date on when the subscription is cancelled
	CancellationDate *UnionNullDateTime `json:"cancellationDate"`
	// Subscription the customer enrolled to
	Subscription SubscriptionType `json:"subscription"`
}

const EnrollmentAvroCRC64Fingerprint = "\xf0\v\xcf—ù\xf8\x13\xf0"

func NewEnrollment() Enrollment {
	r := Enrollment{}
	r.EnrollmentDate = NewDateTime()

	r.RenewalDate = NewDateTime()

	r.CancellationDate = NewUnionNullDateTime()

	r.CancellationDate = nil
	r.Subscription = NewSubscriptionType()

	return r
}

func DeserializeEnrollment(r io.Reader) (Enrollment, error) {
	t := NewEnrollment()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnrollmentFromSchema(r io.Reader, schema string) (Enrollment, error) {
	t := NewEnrollment()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnrollment(r Enrollment, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Id, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LoyaltyId, w)
	if err != nil {
		return err
	}
	err = writeDateTime(r.EnrollmentDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.ExpirationDate, w)
	if err != nil {
		return err
	}
	err = writeDateTime(r.RenewalDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.RenewalDueDate, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Gtin13, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Status, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.AutoRenewal, w)
	if err != nil {
		return err
	}
	err = writeUnionNullDateTime(r.CancellationDate, w)
	if err != nil {
		return err
	}
	err = writeSubscriptionType(r.Subscription, w)
	if err != nil {
		return err
	}
	return err
}

func (r Enrollment) Serialize(w io.Writer) error {
	return writeEnrollment(r, w)
}

func (r Enrollment) Schema() string {
	return "{\"fields\":[{\"doc\":\"Unique identifier of the enrollment\",\"name\":\"id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Customer's Loyalty ID\",\"name\":\"loyaltyId\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Date on when customer has purchased the subscription\",\"name\":\"enrollmentDate\",\"type\":{\"fields\":[{\"doc\":\"The timestamp in ISO 8601 format\",\"name\":\"value\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"The TZ database timezone (always UTC)\",\"name\":\"timezone\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"DateTime\",\"namespace\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore\",\"type\":\"record\"}},{\"doc\":\"Last date for the customer to get benefits\",\"name\":\"expirationDate\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Date on when customer has renewed their already purchased subscription\",\"name\":\"renewalDate\",\"type\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore.DateTime\"},{\"doc\":\"Date on when the subscription is due for renewal\",\"name\":\"renewalDueDate\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"UPC of the item (duration) that customer has purchased\",\"name\":\"gtin13\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Status of the subscription\",\"name\":\"status\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Indicates whether auto renewal is enabled for this customer\",\"name\":\"autoRenewal\",\"type\":\"boolean\"},{\"default\":null,\"doc\":\"Date on when the subscription is cancelled\",\"name\":\"cancellationDate\",\"type\":[\"null\",\"com.kroger.desp.commons.kcp.subscription.subscriptionscore.DateTime\"]},{\"doc\":\"Subscription the customer enrolled to\",\"name\":\"subscription\",\"type\":{\"fields\":[{\"doc\":\"Name of the subscription\",\"name\":\"name\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Description of the subscription\",\"name\":\"description\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Type defining the subscription e.g.: DSP, Fuel Pass, VIP, etc. (unique value)\",\"name\":\"type\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Status of the subscription type. It can be published, unpublished or draft\",\"name\":\"status\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"This attribute group will be added to customer who buys this subscription\",\"name\":\"customerAttributeGroup\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"UPCs associated with the subscription\",\"name\":\"gtin13s\",\"type\":{\"items\":{\"avro.java.string\":\"String\",\"type\":\"string\"},\"type\":\"array\"}},{\"doc\":\"Unique ID of subscription type\",\"name\":\"id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"URL of terms and conditions text\",\"name\":\"termsAndConditionsUrl\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}}],\"name\":\"SubscriptionType\",\"namespace\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore\",\"type\":\"record\"}}],\"name\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore.Enrollment\",\"type\":\"record\"}"
}

func (r Enrollment) SchemaName() string {
	return "com.kroger.desp.commons.kcp.subscription.subscriptionscore.Enrollment"
}

func (_ Enrollment) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ Enrollment) SetInt(v int32)       { panic("Unsupported operation") }
func (_ Enrollment) SetLong(v int64)      { panic("Unsupported operation") }
func (_ Enrollment) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ Enrollment) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ Enrollment) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ Enrollment) SetString(v string)   { panic("Unsupported operation") }
func (_ Enrollment) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Enrollment) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Id}
	case 1:
		return &types.String{Target: &r.LoyaltyId}
	case 2:
		r.EnrollmentDate = NewDateTime()

		return &types.Record{Target: &r.EnrollmentDate}
	case 3:
		return &types.String{Target: &r.ExpirationDate}
	case 4:
		r.RenewalDate = NewDateTime()

		return &types.Record{Target: &r.RenewalDate}
	case 5:
		return &types.String{Target: &r.RenewalDueDate}
	case 6:
		return &types.String{Target: &r.Gtin13}
	case 7:
		return &types.String{Target: &r.Status}
	case 8:
		return &types.Boolean{Target: &r.AutoRenewal}
	case 9:
		r.CancellationDate = NewUnionNullDateTime()

		return r.CancellationDate
	case 10:
		r.Subscription = NewSubscriptionType()

		return &types.Record{Target: &r.Subscription}
	}
	panic("Unknown field index")
}

func (r *Enrollment) SetDefault(i int) {
	switch i {
	case 9:
		r.CancellationDate = nil
		return
	}
	panic("Unknown field index")
}

func (r *Enrollment) NullField(i int) {
	switch i {
	case 9:
		r.CancellationDate = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ Enrollment) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ Enrollment) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ Enrollment) Finalize()                        {}

func (_ Enrollment) AvroCRC64Fingerprint() []byte {
	return []byte(EnrollmentAvroCRC64Fingerprint)
}

func (r Enrollment) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["loyaltyId"], err = json.Marshal(r.LoyaltyId)
	if err != nil {
		return nil, err
	}
	output["enrollmentDate"], err = json.Marshal(r.EnrollmentDate)
	if err != nil {
		return nil, err
	}
	output["expirationDate"], err = json.Marshal(r.ExpirationDate)
	if err != nil {
		return nil, err
	}
	output["renewalDate"], err = json.Marshal(r.RenewalDate)
	if err != nil {
		return nil, err
	}
	output["renewalDueDate"], err = json.Marshal(r.RenewalDueDate)
	if err != nil {
		return nil, err
	}
	output["gtin13"], err = json.Marshal(r.Gtin13)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["autoRenewal"], err = json.Marshal(r.AutoRenewal)
	if err != nil {
		return nil, err
	}
	output["cancellationDate"], err = json.Marshal(r.CancellationDate)
	if err != nil {
		return nil, err
	}
	output["subscription"], err = json.Marshal(r.Subscription)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *Enrollment) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["loyaltyId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LoyaltyId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for loyaltyId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["enrollmentDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EnrollmentDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for enrollmentDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["expirationDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ExpirationDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for expirationDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["renewalDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RenewalDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for renewalDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["renewalDueDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RenewalDueDate); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for renewalDueDate")
	}
	val = func() json.RawMessage {
		if v, ok := fields["gtin13"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Gtin13); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for gtin13")
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["autoRenewal"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AutoRenewal); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for autoRenewal")
	}
	val = func() json.RawMessage {
		if v, ok := fields["cancellationDate"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CancellationDate); err != nil {
			return err
		}
	} else {
		r.CancellationDate = NewUnionNullDateTime()

		r.CancellationDate = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["subscription"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Subscription); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for subscription")
	}
	return nil
}
