// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DateTime.avsc
 *     Enrollment.avsc
 *     EnrollmentCancelledEvent.avsc
 *     EnrollmentCreatedEvent.avsc
 *     EnrollmentExpirationEvent.avsc
 *     EnrollmentExpiredEvent.avsc
 *     EnrollmentRenewalEvent.avsc
 *     EventHeader.avsc
 *     SubscriptionType.avsc
 *     SubscriptionTypeCreatedEvent.avsc
 *     SubscriptionTypeUpdatedEvent.avsc
 */
package subscription_subscriptionscore

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type DateTime struct {
	// The timestamp in ISO 8601 format
	Value string `json:"value"`
	// The TZ database timezone (always UTC)
	Timezone *UnionNullString `json:"timezone"`
}

const DateTimeAvroCRC64Fingerprint = "K\xb1$0$\x9f\x93\xa2"

func NewDateTime() DateTime {
	r := DateTime{}
	r.Timezone = NewUnionNullString()

	r.Timezone = nil
	return r
}

func DeserializeDateTime(r io.Reader) (DateTime, error) {
	t := NewDateTime()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeDateTimeFromSchema(r io.Reader, schema string) (DateTime, error) {
	t := NewDateTime()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeDateTime(r DateTime, w io.Writer) error {
	var err error
	err = vm.WriteString(r.Value, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Timezone, w)
	if err != nil {
		return err
	}
	return err
}

func (r DateTime) Serialize(w io.Writer) error {
	return writeDateTime(r, w)
}

func (r DateTime) Schema() string {
	return "{\"fields\":[{\"doc\":\"The timestamp in ISO 8601 format\",\"name\":\"value\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"The TZ database timezone (always UTC)\",\"name\":\"timezone\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore.DateTime\",\"type\":\"record\"}"
}

func (r DateTime) SchemaName() string {
	return "com.kroger.desp.commons.kcp.subscription.subscriptionscore.DateTime"
}

func (_ DateTime) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ DateTime) SetInt(v int32)       { panic("Unsupported operation") }
func (_ DateTime) SetLong(v int64)      { panic("Unsupported operation") }
func (_ DateTime) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ DateTime) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ DateTime) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ DateTime) SetString(v string)   { panic("Unsupported operation") }
func (_ DateTime) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *DateTime) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.Value}
	case 1:
		r.Timezone = NewUnionNullString()

		return r.Timezone
	}
	panic("Unknown field index")
}

func (r *DateTime) SetDefault(i int) {
	switch i {
	case 1:
		r.Timezone = nil
		return
	}
	panic("Unknown field index")
}

func (r *DateTime) NullField(i int) {
	switch i {
	case 1:
		r.Timezone = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ DateTime) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ DateTime) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ DateTime) Finalize()                        {}

func (_ DateTime) AvroCRC64Fingerprint() []byte {
	return []byte(DateTimeAvroCRC64Fingerprint)
}

func (r DateTime) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["value"], err = json.Marshal(r.Value)
	if err != nil {
		return nil, err
	}
	output["timezone"], err = json.Marshal(r.Timezone)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *DateTime) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["value"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Value); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for value")
	}
	val = func() json.RawMessage {
		if v, ok := fields["timezone"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Timezone); err != nil {
			return err
		}
	} else {
		r.Timezone = NewUnionNullString()

		r.Timezone = nil
	}
	return nil
}
