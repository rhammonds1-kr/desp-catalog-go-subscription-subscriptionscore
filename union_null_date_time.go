// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DateTime.avsc
 *     Enrollment.avsc
 *     EnrollmentCancelledEvent.avsc
 *     EnrollmentCreatedEvent.avsc
 *     EnrollmentExpirationEvent.avsc
 *     EnrollmentExpiredEvent.avsc
 *     EnrollmentRenewalEvent.avsc
 *     EventHeader.avsc
 *     SubscriptionType.avsc
 *     SubscriptionTypeCreatedEvent.avsc
 *     SubscriptionTypeUpdatedEvent.avsc
 */
package subscription_subscriptionscore

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

type UnionNullDateTimeTypeEnum int

const (
	UnionNullDateTimeTypeEnumDateTime UnionNullDateTimeTypeEnum = 1
)

type UnionNullDateTime struct {
	Null      *types.NullVal
	DateTime  DateTime
	UnionType UnionNullDateTimeTypeEnum
}

func writeUnionNullDateTime(r *UnionNullDateTime, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullDateTimeTypeEnumDateTime:
		return writeDateTime(r.DateTime, w)
	}
	return fmt.Errorf("invalid value for *UnionNullDateTime")
}

func NewUnionNullDateTime() *UnionNullDateTime {
	return &UnionNullDateTime{}
}

func (r *UnionNullDateTime) Serialize(w io.Writer) error {
	return writeUnionNullDateTime(r, w)
}

func DeserializeUnionNullDateTime(r io.Reader) (*UnionNullDateTime, error) {
	t := NewUnionNullDateTime()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullDateTimeFromSchema(r io.Reader, schema string) (*UnionNullDateTime, error) {
	t := NewUnionNullDateTime()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullDateTime) Schema() string {
	return "[\"null\",{\"fields\":[{\"doc\":\"The timestamp in ISO 8601 format\",\"name\":\"value\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"The TZ database timezone (always UTC)\",\"name\":\"timezone\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"DateTime\",\"namespace\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore\",\"type\":\"record\"}]"
}

func (_ *UnionNullDateTime) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionNullDateTime) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionNullDateTime) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionNullDateTime) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullDateTime) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionNullDateTime) SetString(v string)  { panic("Unsupported operation") }

func (r *UnionNullDateTime) SetLong(v int64) {

	r.UnionType = (UnionNullDateTimeTypeEnum)(v)
}

func (r *UnionNullDateTime) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.DateTime = NewDateTime()
		return &types.Record{Target: (&r.DateTime)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullDateTime) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionNullDateTime) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionNullDateTime) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullDateTime) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionNullDateTime) Finalize()                        {}

func (r *UnionNullDateTime) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullDateTimeTypeEnumDateTime:
		return json.Marshal(map[string]interface{}{"com.kroger.desp.commons.kcp.subscription.subscriptionscore.DateTime": r.DateTime})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullDateTime")
}

func (r *UnionNullDateTime) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["com.kroger.desp.commons.kcp.subscription.subscriptionscore.DateTime"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.DateTime)
	}
	return fmt.Errorf("invalid value for *UnionNullDateTime")
}
