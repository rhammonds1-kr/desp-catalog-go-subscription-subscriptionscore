// Code generated by github.com/actgardner/gogen-avro/v8. DO NOT EDIT.
/*
 * SOURCES:
 *     DateTime.avsc
 *     Enrollment.avsc
 *     EnrollmentCancelledEvent.avsc
 *     EnrollmentCreatedEvent.avsc
 *     EnrollmentExpirationEvent.avsc
 *     EnrollmentExpiredEvent.avsc
 *     EnrollmentRenewalEvent.avsc
 *     EventHeader.avsc
 *     SubscriptionType.avsc
 *     SubscriptionTypeCreatedEvent.avsc
 *     SubscriptionTypeUpdatedEvent.avsc
 */
package subscription_subscriptionscore

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v9/compiler"
	"github.com/actgardner/gogen-avro/v9/vm"
	"github.com/actgardner/gogen-avro/v9/vm/types"
)

var _ = fmt.Printf

type EnrollmentRenewalEvent struct {
	// Header field for this event
	EventHeader EventHeader `json:"eventHeader"`
	// Enrollment entity renewed
	Enrollment Enrollment `json:"enrollment"`
}

const EnrollmentRenewalEventAvroCRC64Fingerprint = "\xed7<\xea6]\x82\xf2"

func NewEnrollmentRenewalEvent() EnrollmentRenewalEvent {
	r := EnrollmentRenewalEvent{}
	r.EventHeader = NewEventHeader()

	r.Enrollment = NewEnrollment()

	return r
}

func DeserializeEnrollmentRenewalEvent(r io.Reader) (EnrollmentRenewalEvent, error) {
	t := NewEnrollmentRenewalEvent()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeEnrollmentRenewalEventFromSchema(r io.Reader, schema string) (EnrollmentRenewalEvent, error) {
	t := NewEnrollmentRenewalEvent()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeEnrollmentRenewalEvent(r EnrollmentRenewalEvent, w io.Writer) error {
	var err error
	err = writeEventHeader(r.EventHeader, w)
	if err != nil {
		return err
	}
	err = writeEnrollment(r.Enrollment, w)
	if err != nil {
		return err
	}
	return err
}

func (r EnrollmentRenewalEvent) Serialize(w io.Writer) error {
	return writeEnrollmentRenewalEvent(r, w)
}

func (r EnrollmentRenewalEvent) Schema() string {
	return "{\"fields\":[{\"doc\":\"Header field for this event\",\"name\":\"eventHeader\",\"type\":{\"doc\":\"The below fields include header information and should be included on every event in the DESP. Inspired by: https://github.com/cloudevents/spec/blob/v0.2/spec.md\",\"fields\":[{\"doc\":\"A unique identifier of the event - for example, a randomly generated GUID\",\"name\":\"id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Time the event occurred in milliseconds since epoch, UTC timezone.\",\"name\":\"time\",\"type\":\"long\"},{\"doc\":\"Type of occurrence which has happened. Reference the domain.event registered in schema-registry.\",\"name\":\"type\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Service that produced the event. Future: reference to producer registry.\",\"name\":\"source\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}}],\"name\":\"EventHeader\",\"namespace\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore\",\"type\":\"record\"}},{\"doc\":\"Enrollment entity renewed\",\"name\":\"enrollment\",\"type\":{\"fields\":[{\"doc\":\"Unique identifier of the enrollment\",\"name\":\"id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Customer's Loyalty ID\",\"name\":\"loyaltyId\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Date on when customer has purchased the subscription\",\"name\":\"enrollmentDate\",\"type\":{\"fields\":[{\"doc\":\"The timestamp in ISO 8601 format\",\"name\":\"value\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"default\":null,\"doc\":\"The TZ database timezone (always UTC)\",\"name\":\"timezone\",\"type\":[\"null\",{\"avro.java.string\":\"String\",\"type\":\"string\"}]}],\"name\":\"DateTime\",\"namespace\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore\",\"type\":\"record\"}},{\"doc\":\"Last date for the customer to get benefits\",\"name\":\"expirationDate\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Date on when customer has renewed their already purchased subscription\",\"name\":\"renewalDate\",\"type\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore.DateTime\"},{\"doc\":\"Date on when the subscription is due for renewal\",\"name\":\"renewalDueDate\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"UPC of the item (duration) that customer has purchased\",\"name\":\"gtin13\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Status of the subscription\",\"name\":\"status\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Indicates whether auto renewal is enabled for this customer\",\"name\":\"autoRenewal\",\"type\":\"boolean\"},{\"default\":null,\"doc\":\"Date on when the subscription is cancelled\",\"name\":\"cancellationDate\",\"type\":[\"null\",\"com.kroger.desp.commons.kcp.subscription.subscriptionscore.DateTime\"]},{\"doc\":\"Subscription the customer enrolled to\",\"name\":\"subscription\",\"type\":{\"fields\":[{\"doc\":\"Name of the subscription\",\"name\":\"name\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Description of the subscription\",\"name\":\"description\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Type defining the subscription e.g.: DSP, Fuel Pass, VIP, etc. (unique value)\",\"name\":\"type\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"Status of the subscription type. It can be published, unpublished or draft\",\"name\":\"status\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"This attribute group will be added to customer who buys this subscription\",\"name\":\"customerAttributeGroup\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"UPCs associated with the subscription\",\"name\":\"gtin13s\",\"type\":{\"items\":{\"avro.java.string\":\"String\",\"type\":\"string\"},\"type\":\"array\"}},{\"doc\":\"Unique ID of subscription type\",\"name\":\"id\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}},{\"doc\":\"URL of terms and conditions text\",\"name\":\"termsAndConditionsUrl\",\"type\":{\"avro.java.string\":\"String\",\"type\":\"string\"}}],\"name\":\"SubscriptionType\",\"namespace\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore\",\"type\":\"record\"}}],\"name\":\"Enrollment\",\"namespace\":\"com.kroger.desp.commons.kcp.subscription.subscriptionscore\",\"type\":\"record\"}}],\"name\":\"com.kroger.desp.events.kcp.subscription.subscriptionscore.EnrollmentRenewalEvent\",\"type\":\"record\"}"
}

func (r EnrollmentRenewalEvent) SchemaName() string {
	return "com.kroger.desp.events.kcp.subscription.subscriptionscore.EnrollmentRenewalEvent"
}

func (_ EnrollmentRenewalEvent) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) SetInt(v int32)       { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) SetLong(v int64)      { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) SetString(v string)   { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *EnrollmentRenewalEvent) Get(i int) types.Field {
	switch i {
	case 0:
		r.EventHeader = NewEventHeader()

		return &types.Record{Target: &r.EventHeader}
	case 1:
		r.Enrollment = NewEnrollment()

		return &types.Record{Target: &r.Enrollment}
	}
	panic("Unknown field index")
}

func (r *EnrollmentRenewalEvent) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *EnrollmentRenewalEvent) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ EnrollmentRenewalEvent) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ EnrollmentRenewalEvent) Finalize()                        {}

func (_ EnrollmentRenewalEvent) AvroCRC64Fingerprint() []byte {
	return []byte(EnrollmentRenewalEventAvroCRC64Fingerprint)
}

func (r EnrollmentRenewalEvent) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["eventHeader"], err = json.Marshal(r.EventHeader)
	if err != nil {
		return nil, err
	}
	output["enrollment"], err = json.Marshal(r.Enrollment)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *EnrollmentRenewalEvent) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["eventHeader"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.EventHeader); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for eventHeader")
	}
	val = func() json.RawMessage {
		if v, ok := fields["enrollment"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Enrollment); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for enrollment")
	}
	return nil
}
